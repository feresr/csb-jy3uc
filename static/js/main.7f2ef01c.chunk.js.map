{"version":3,"sources":["App.js","index.js"],"names":["MyDropzone","onLoad","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","result","readAsDataURL","useDropzone","getRootProps","getInputProps","isDragActive","IPhone","open","texture","props","group","useRef","useFrame","state","t","clock","getElapsedTime","current","rotation","x","THREE","lerp","Math","cos","z","sin","position","y","PI","useGLTF","nodes","materials","newT","useLoader","TextureLoader","flipY","Display","map","ref","dispose","scale","geometry","立方体001","material","立方体001_1","Black","立方体001_2","Back","立方体001_3","GOLD","立方体001_4","BARRES","立方体001_5","Labber","立方体001_7","Lenscover","立方体001_9","App","useControls","hello","goodbye","useState","setOpen","setTexture","useSpring","Number","main","style","background","to","i","gl","antialias","dpr","camera","fov","pointLight","intensity","color","fallback","ContactShadows","rotation-x","opacity","width","height","blur","far","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f2ef01c.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport { useControls } from \"leva\";\n\nimport React, {\n  useCallback,\n  Suspense,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { Canvas, useFrame, useLoader } from \"@react-three/fiber\";\nimport { Environment, useGLTF, ContactShadows, Box } from \"@react-three/drei\";\nimport { useSpring } from \"@react-spring/core\";\nimport { a as three } from \"@react-spring/three\";\nimport { a as web } from \"@react-spring/web\";\nimport { useDropzone } from \"react-dropzone\";\nimport { TextureLoader } from \"three\";\n\nfunction MyDropzone({ onLoad, ...props }) {\n  const onDrop = useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader();\n      reader.onabort = () => console.log(\"file reading was aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = () => {\n        onLoad(reader.result);\n      };\n      reader.readAsDataURL(file);\n    });\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        <p>Drop the files here ...</p>\n      ) : (\n        <p>\n          Click <b>here</b> to change the content on the phone screen (tap the\n          phone to flip it)\n        </p>\n      )}\n    </div>\n  );\n}\n\nfunction IPhone({ open, texture, ...props }) {\n  const group = useRef();\n  useFrame((state) => {\n    const t = state.clock.getElapsedTime();\n    group.current.rotation.x = THREE.MathUtils.lerp(\n      group.current.rotation.x,\n      open ? Math.cos(t / 2) / 8 + 0.25 : Math.cos(t) / 8 - 0.25,\n      0.1\n    );\n    group.current.rotation.z = THREE.MathUtils.lerp(\n      group.current.rotation.z,\n      open ? -0.5 + Math.sin(t / 4) / 4 : +0.5 + Math.sin(t / 4) / 4,\n      0.1\n    );\n    group.current.position.y = THREE.MathUtils.lerp(\n      group.current.position.y,\n      true ? Math.sin(t) / 5 : props.position.y,\n      0.1\n    );\n    group.current.rotation.y = THREE.MathUtils.lerp(\n      group.current.rotation.y,\n      open ? Math.PI : 0,\n      0.1\n    );\n  });\n\n  const { nodes, materials } = useGLTF(\"/csb-jy3uc/PRO.gltf\");\n  if (texture) {\n    const newT = useLoader(TextureLoader, texture);\n    newT.flipY = false;\n    materials.Display.map = newT;\n  }\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group rotation={[-Math.PI, 0.0, -Math.PI]} scale={0.04}>\n        <mesh\n          geometry={nodes.立方体001.geometry}\n          material={materials[\"Material.001\"]}\n        />\n        <mesh\n          geometry={nodes.立方体001_1.geometry}\n          material={materials.Black}\n        />\n        <mesh geometry={nodes.立方体001_2.geometry} material={materials.Back} />\n        <mesh geometry={nodes.立方体001_3.geometry} material={materials.GOLD} />\n        <mesh\n          geometry={nodes.立方体001_4.geometry}\n          material={materials.BARRES}\n        />\n        <mesh\n          geometry={nodes.立方体001_5.geometry}\n          material={materials.Labber}\n        />\n        <mesh\n          geometry={nodes.立方体001_7.geometry}\n          material={materials.Lenscover}\n        />\n        <mesh\n          geometry={nodes.立方体001_9.geometry}\n          material={materials.Display}\n        />\n      </group>\n    </group>\n  );\n}\n\nexport default function App() {\n  const { hello, goodbye } = useControls({\n    hello: \"#f0f0f0\",\n    goodbye: \"#ffbebe\",\n  });\n\n  // This flag controls open state, alternates between true & false\n  const [open, setOpen] = useState(true);\n  const [texture, setTexture] = useState(\"\");\n  // We turn this into a spring animation that interpolates between 0 and 1\n  const props = useSpring({ open: Number(open) });\n  return (\n    <web.main style={{ background: props.open.to([1, 0], [hello, goodbye]) }}>\n      <h1>{open ? \"Hello!\" : \"Good bye.\"}</h1>\n\n      <MyDropzone\n        onLoad={(i) => {\n          setTexture(i);\n        }}\n      />\n      <Canvas gl={{ antialias: false }} dpr={[1, 2]} camera={{ fov: 32, position: [13, 3, 6] }}>\n        <three.pointLight\n          position={[10, 10, 10]}\n          intensity={1.5}\n          color={props.open.to([1, 0], [hello, goodbye])}\n        />\n        <three.pointLight\n          position={[5, 5, -10]}\n          intensity={0.6}\n          color={props.open.to([1, 0], [hello, goodbye])}\n        />\n        <Suspense fallback={\n          <Box/>\n        }>\n          <ContactShadows\n            rotation-x={Math.PI / 2}\n            position={[0, -2.6, 0]}\n            opacity={0.4}\n            width={8}\n            height={8}\n            blur={2}\n            far={7.5}\n          />\n          <IPhone\n            onClick={() => setOpen(!open)}\n            open={open}\n            texture={texture}\n            position={[0.0, -1.0, 0.0]}\n          />\n        </Suspense>\n      </Canvas>\n    </web.main>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}