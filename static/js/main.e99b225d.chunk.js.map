{"version":3,"sources":["App.js","index.js"],"names":["MyDropzone","onLoad","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","result","readAsDataURL","useDropzone","getRootProps","getInputProps","isDragActive","IPhone","open","texture","props","group","useRef","useEffect","newT","TextureLoader","load","undefined","error","flipY","materials","Display","map","useFrame","state","t","clock","getElapsedTime","current","rotation","x","THREE","lerp","Math","cos","z","sin","position","y","PI","useGLTF","nodes","ref","dispose","scale","geometry","立方体001","material","立方体001_1","Black","立方体001_2","Back","立方体001_3","GOLD","立方体001_4","BARRES","立方体001_5","Labber","立方体001_7","Lenscover","立方体001_9","App","useControls","title","front","back","background","light","useState","setOpen","setTexture","useSpring","Number","main","style","to","i","camera","fov","pointLight","intensity","color","fallback","ContactShadows","rotation-x","opacity","width","height","blur","far","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e99b225d.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport { useControls } from \"leva\";\n\nimport React, {\n  useCallback,\n  Suspense,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { Environment, useGLTF, ContactShadows } from \"@react-three/drei\";\nimport { useSpring } from \"@react-spring/core\";\nimport { a as three } from \"@react-spring/three\";\nimport { a as web } from \"@react-spring/web\";\nimport { useDropzone } from \"react-dropzone\";\nimport { TextureLoader } from \"three\";\n\nfunction MyDropzone({ onLoad, ...props }) {\n  const onDrop = useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader();\n      reader.onabort = () => console.log(\"file reading was aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = () => {\n        onLoad(reader.result);\n      };\n      reader.readAsDataURL(file);\n    });\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div {...getRootProps()} >\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        <p>Drop the files here ...</p>\n      ) : (\n        <p>Click <b>here</b> to change the content on the phone screen (tap the phone to flip it)</p>\n      )}\n    </div>\n  );\n}\nfunction IPhone({ open, texture, ...props }) {\n  const group = useRef();\n  useEffect(() => {\n    if (texture) {\n      const newT = new TextureLoader().load(\n        texture,\n        undefined,\n        (texture) => {\n          console.log(\"success\");\n        },\n        (error) => {\n          console.log(\"error\");\n          console.log(error);\n        }\n      );\n      newT.flipY = false;\n      materials.Display.map = newT;\n    }\n  }, [texture]);\n  useFrame((state) => {\n    const t = state.clock.getElapsedTime();\n    group.current.rotation.x = THREE.MathUtils.lerp(\n      group.current.rotation.x,\n      open ? Math.cos(t / 2) / 8 + 0.25 : Math.cos(t) / 8 - 0.25,\n      0.1\n    );\n    group.current.rotation.z = THREE.MathUtils.lerp(\n      group.current.rotation.z,\n      open? -0.5 + Math.sin(t / 4) / 4 : +0.5 + Math.sin(t / 4) / 4,\n      0.1\n    );\n    group.current.position.y = THREE.MathUtils.lerp(\n      group.current.position.y,\n      true ? Math.sin(t) / 5 : props.position.y,\n      0.1\n    );\n    group.current.rotation.y = THREE.MathUtils.lerp(\n      group.current.rotation.y,\n      open ? Math.PI : 0,\n      0.1\n    );\n  });\n\n  const { nodes, materials } = useGLTF(\"/csb-jy3uc/PRO.gltf\");\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group rotation={[-Math.PI, 0.0, -Math.PI]} scale={0.04}>\n        <mesh\n          geometry={nodes.立方体001.geometry}\n          material={materials[\"Material.001\"]}\n        />\n        <mesh\n          geometry={nodes.立方体001_1.geometry}\n          material={materials.Black}\n        />\n        <mesh geometry={nodes.立方体001_2.geometry} material={materials.Back} />\n        <mesh geometry={nodes.立方体001_3.geometry} material={materials.GOLD} />\n        <mesh\n          geometry={nodes.立方体001_4.geometry}\n          material={materials.BARRES}\n        />\n        <mesh\n          geometry={nodes.立方体001_5.geometry}\n          material={materials.Labber}\n        />\n        <mesh\n          geometry={nodes.立方体001_7.geometry}\n          material={materials.Lenscover}\n        />\n        <mesh\n          geometry={nodes.立方体001_9.geometry}\n          material={materials.Display}\n        />\n      </group>\n    </group>\n  );\n}\n\nexport default function App() {\n  const { title, background, light } = useControls({\n    title: \"Hello!\",\n    front: \"#f0f0f0\",\n    back: \"#ffabab\",\n  });\n\n  // This flag controls open state, alternates between true & false\n  const [open, setOpen] = useState(false);\n  const [texture, setTexture] = useState(\"\");\n  // We turn this into a spring animation that interpolates between 0 and 1\n  const props = useSpring({ open: Number(open) });\n  return (\n    <web.main style={{ background: props.open.to([0, 1], [light, background]) }}>\n      <h1>{title}</h1>\n      <MyDropzone onLoad={(i) => { setTexture(i); }} />\n      <Canvas camera={{ fov: 32, position: [13, 3, 6] }}>\n        <three.pointLight\n          position={[10, 10, 10]}\n          intensity={1.5}\n          color={ props.open.to([0, 1], [light, background]) }\n        />\n        <three.pointLight\n          position={[5, 5, -10]}\n          intensity={0.6}\n          color={props.open.to([0, 1], [light, background])}\n        />\n        <Suspense fallback={null}>\n          <ContactShadows\n            rotation-x={Math.PI / 2}\n            position={[0, -2.6, 0]}\n            opacity={0.4}\n            width={8}\n            height={8}\n            blur={2}\n            far={7.5}\n          />\n          <IPhone\n            onClick={() => setOpen(!open)}\n            open={open}\n            texture={texture}\n            position={[0.0, -1.0, 0.0]}\n          />\n        </Suspense>\n      </Canvas>\n    </web.main>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}